[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "requests_html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests_html",
        "description": "requests_html",
        "detail": "requests_html",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "dataclasses",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dataclasses",
        "description": "dataclasses",
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "model_selection",
        "importPath": "sklearn",
        "description": "sklearn",
        "isExtraImport": true,
        "detail": "sklearn",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "KFold",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "to_categorical",
        "importPath": "keras.utils",
        "description": "keras.utils",
        "isExtraImport": true,
        "detail": "keras.utils",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ConfusionMatrixDisplay",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "ConfusionMatrixDisplay",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api, win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise\n            if silent:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.util, importlib.machinery\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,\n    )",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api, win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):\n        this_dest = this_pyd + \".old\"",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_postinstall",
        "description": "venv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "venv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:\n        failures.append(script)\ndef find_and_run(possible_locations, extras):",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "venv.Scripts.pywin32_testall",
        "description": "venv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))",
        "detail": "venv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "StrEnum",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class StrEnum(str, Enum):\n    \"\"\"Enum subclass whose members are also instances of str\n    and directly comparable to strings. str type is forced at declaration.\n    Adapted from https://github.com/kissgyorgy/enum34-custom/blob/dbc89596761c970398701d26c6a5bbcfcf70f548/enum_custom.py#L100\n    (MIT license)\n    \"\"\"\n    def __new__(cls, *args):\n        for arg in args:\n            if not isinstance(arg, str):\n                raise TypeError(\"Not text %s:\" % arg)",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "SupportedOS",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class SupportedOS(StrEnum):\n    LINUX = \"Linux\"\n    MACOSX = \"MacOSX\"\nclass SupportedArch(StrEnum):\n    AARCH64 = \"aarch64\"\n    ARM64 = \"arm64\"\n    PPC64LE = \"ppc64le\"\n    S390X = \"s390x\"\n    X86_64 = \"x86_64\"\n    X86 = \"x86\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "SupportedArch",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class SupportedArch(StrEnum):\n    AARCH64 = \"aarch64\"\n    ARM64 = \"arm64\"\n    PPC64LE = \"ppc64le\"\n    S390X = \"s390x\"\n    X86_64 = \"x86_64\"\n    X86 = \"x86\"\nclass Flavor(StrEnum):\n    ANACONDA = \"anaconda\"\n    MINICONDA = \"miniconda\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "Flavor",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class Flavor(StrEnum):\n    ANACONDA = \"anaconda\"\n    MINICONDA = \"miniconda\"\nclass TFlavor(StrEnum):\n    ANACONDA = \"Anaconda\"\n    MINICONDA = \"Miniconda\"\nclass Suffix(StrEnum):\n    TWO = \"2\"\n    THREE = \"3\"\n    NONE = \"\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "TFlavor",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class TFlavor(StrEnum):\n    ANACONDA = \"Anaconda\"\n    MINICONDA = \"Miniconda\"\nclass Suffix(StrEnum):\n    TWO = \"2\"\n    THREE = \"3\"\n    NONE = \"\"\nclass PyVersion(StrEnum):\n    PY27 = \"py27\"\n    PY36 = \"py36\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "Suffix",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class Suffix(StrEnum):\n    TWO = \"2\"\n    THREE = \"3\"\n    NONE = \"\"\nclass PyVersion(StrEnum):\n    PY27 = \"py27\"\n    PY36 = \"py36\"\n    PY37 = \"py37\"\n    PY38 = \"py38\"\n    PY39 = \"py39\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "PyVersion",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class PyVersion(StrEnum):\n    PY27 = \"py27\"\n    PY36 = \"py36\"\n    PY37 = \"py37\"\n    PY38 = \"py38\"\n    PY39 = \"py39\"\n    PY310 = \"py310\"\n    def version(self):\n        first, *others = self.value[2:]\n        return f\"{first}.{''.join(others)}\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "VersionStr",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class VersionStr(str):\n    def info(self):\n        return tuple(int(n) for n in self.replace(\"-\", \".\").split(\".\"))\n    def __eq__(self, other):\n        return str(self) == str(other)\n    def __lt__(self, other):\n        if isinstance(other, VersionStr):\n            return self.info() < other.info()\n        raise ValueError(\"VersionStr can only be compared to other VersionStr\")\n    @classmethod",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "CondaVersion",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class CondaVersion(NamedTuple):\n    flavor: Flavor\n    suffix: Suffix\n    version_str: VersionStr\n    py_version: Optional[PyVersion]\n    @classmethod\n    def from_str(cls, s):\n        \"\"\"\n        Convert a string of the form \"miniconda_n-ver\" or \"miniconda_n-py_ver-ver\" to a :class:`CondaVersion` object.\n        \"\"\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "CondaSpec",
        "kind": 6,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "class CondaSpec(NamedTuple):\n    tflavor: TFlavor\n    version: CondaVersion\n    os: SupportedOS\n    arch: SupportedArch\n    md5: str\n    repo: str\n    py_version: Optional[PyVersion] = None\n    @classmethod\n    def from_filestem(cls, stem, md5, repo, py_version=None):",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "make_script",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "def make_script(specs: List[CondaSpec]):\n    install_lines = [s.to_install_lines() for s in specs]\n    return install_script_fmt.format(\n        install_lines=\"\\n\".join(install_lines),\n        tflavor=specs[0].tflavor,\n    )\ndef get_existing_condas(name):\n    \"\"\"\n    Enumerate existing Miniconda installation scripts in share/python-build/ except rolling releases.\n    :returns: A generator of :class:`CondaVersion` objects.",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "get_existing_condas",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "def get_existing_condas(name):\n    \"\"\"\n    Enumerate existing Miniconda installation scripts in share/python-build/ except rolling releases.\n    :returns: A generator of :class:`CondaVersion` objects.\n    \"\"\"\n    logger.info(\"Getting known %(name)s versions\",locals())\n    for p in out_dir.iterdir():\n        entry_name = p.name\n        if not p.is_file() or not entry_name.startswith(name):\n            continue",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "get_available_condas",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "def get_available_condas(name, repo):\n    \"\"\"\n    Fetch remote miniconda versions.\n    :returns: A generator of :class:`CondaSpec` objects for each release available for download\n    except rolling releases.\n    \"\"\"\n    logger.info(\"Fetching remote %(name)s versions\",locals())\n    session = requests_html.HTMLSession()\n    response = session.get(repo)\n    page: requests_html.HTML = response.html",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "key_fn",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "def key_fn(spec: CondaSpec):\n    return (\n        spec.tflavor,\n        spec.version.version_str.info(),\n        spec.version.suffix.value,\n        spec.os.value,\n        spec.arch.value,\n    )\nif __name__ == \"__main__\":\n    parser = ArgumentParser(description=__doc__)",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "logger = logging.getLogger(__name__)\nCONDA_REPO = \"https://repo.anaconda.com\"\nMINICONDA_REPO = CONDA_REPO + \"/miniconda\"\nANACONDA_REPO = CONDA_REPO + \"/archive\"\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "CONDA_REPO",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "CONDA_REPO = \"https://repo.anaconda.com\"\nMINICONDA_REPO = CONDA_REPO + \"/miniconda\"\nANACONDA_REPO = CONDA_REPO + \"/archive\"\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {tflavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "MINICONDA_REPO",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "MINICONDA_REPO = CONDA_REPO + \"/miniconda\"\nANACONDA_REPO = CONDA_REPO + \"/archive\"\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {tflavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"\n    echo",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "ANACONDA_REPO",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "ANACONDA_REPO = CONDA_REPO + \"/archive\"\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {tflavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"\n    echo\n  }} >&2",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "install_script_fmt",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "install_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {tflavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"\n    echo\n  }} >&2\n  exit 1",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "install_line_fmt",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "install_line_fmt = \"\"\"\n\"{os}-{arch}\" )\n  install_script \"{tflavor}{suffix}-{version_py_version}{version_str}-{os}-{arch}\" \"{repo}/{tflavor}{suffix}-{version_py_version}{version_str}-{os}-{arch}.sh#{md5}\" \"{flavor}\" verify_{py_version}\n  ;;\n\"\"\".strip()\nhere = Path(__file__).resolve()\nout_dir: Path = here.parent.parent / \"share\" / \"python-build\"\nclass StrEnum(str, Enum):\n    \"\"\"Enum subclass whose members are also instances of str\n    and directly comparable to strings. str type is forced at declaration.",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "peekOfCode": "here = Path(__file__).resolve()\nout_dir: Path = here.parent.parent / \"share\" / \"python-build\"\nclass StrEnum(str, Enum):\n    \"\"\"Enum subclass whose members are also instances of str\n    and directly comparable to strings. str type is forced at declaration.\n    Adapted from https://github.com/kissgyorgy/enum34-custom/blob/dbc89596761c970398701d26c6a5bbcfcf70f548/enum_custom.py#L100\n    (MIT license)\n    \"\"\"\n    def __new__(cls, *args):\n        for arg in args:",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniconda",
        "documentation": {}
    },
    {
        "label": "download_sha",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "def download_sha(url):\n    logger.debug('Downloading SHA file %(url)s', locals())\n    tup = tuple(reversed(requests.get(url).text.replace('./', '').rstrip().split()))\n    logger.debug('Got %(tup)s', locals())\n    return tup\ndef create_spec(filename, sha, url):\n    flavor_with_suffix, version, subversion, os, arch = filename.replace('.sh', '').split('-')\n    suffix = flavor_with_suffix[-1]\n    if suffix in string.digits:\n        flavor = flavor_with_suffix[:-1]",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "create_spec",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "def create_spec(filename, sha, url):\n    flavor_with_suffix, version, subversion, os, arch = filename.replace('.sh', '').split('-')\n    suffix = flavor_with_suffix[-1]\n    if suffix in string.digits:\n        flavor = flavor_with_suffix[:-1]\n    else:\n        flavor = flavor_with_suffix\n    spec = {\n        'filename': filename,\n        'sha': sha,",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "supported",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "def supported(filename):\n    return ('pypy' not in filename) and ('Windows' not in filename)\ndef add_version(release):\n    download_urls = { f['name']: f['browser_download_url'] for f in release['assets'] }\n    shas = dict([download_sha(url) for (name, url) in download_urls.items() if name.endswith('.sha256')])\n    specs = [create_spec(filename, sha, download_urls[filename]) for (filename, sha) in shas.items() if supported(filename)]\n    for distribution in DISTRIBUTIONS:\n        distribution_specs = [spec for spec in specs if distribution in spec['flavor'].lower()]\n        count = len(distribution_specs)\n        if count > 0:",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "add_version",
        "kind": 2,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "def add_version(release):\n    download_urls = { f['name']: f['browser_download_url'] for f in release['assets'] }\n    shas = dict([download_sha(url) for (name, url) in download_urls.items() if name.endswith('.sha256')])\n    specs = [create_spec(filename, sha, download_urls[filename]) for (filename, sha) in shas.items() if supported(filename)]\n    for distribution in DISTRIBUTIONS:\n        distribution_specs = [spec for spec in specs if distribution in spec['flavor'].lower()]\n        count = len(distribution_specs)\n        if count > 0:\n            output_file = out_dir / distribution_specs[0]['installer_filename']\n            logger.info('Writing %(count)d specs for %(distribution)s to %(output_file)s', locals())",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "logger = logging.getLogger(__name__)\nlogging.basicConfig(level=os.environ.get('LOGLEVEL', 'INFO'))\nMINIFORGE_REPO = 'conda-forge/miniforge'\nPYTHON_VERSION = '310'\nDISTRIBUTIONS = ['miniforge', 'mambaforge']\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "MINIFORGE_REPO",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "MINIFORGE_REPO = 'conda-forge/miniforge'\nPYTHON_VERSION = '310'\nDISTRIBUTIONS = ['miniforge', 'mambaforge']\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {flavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "PYTHON_VERSION",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "PYTHON_VERSION = '310'\nDISTRIBUTIONS = ['miniforge', 'mambaforge']\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {flavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"\n    echo",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "DISTRIBUTIONS",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "DISTRIBUTIONS = ['miniforge', 'mambaforge']\ninstall_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {flavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"\n    echo\n  }} >&2",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "install_script_fmt",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "install_script_fmt = \"\"\"\ncase \"$(anaconda_architecture 2>/dev/null || true)\" in\n{install_lines}\n* )\n  {{ echo\n    colorize 1 \"ERROR\"\n    echo \": The binary distribution of {flavor} is not available for $(anaconda_architecture 2>/dev/null || true).\"\n    echo\n  }} >&2\n  exit 1",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "install_line_fmt",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "install_line_fmt = \"\"\"\n\"{os}-{arch}\" )\n  install_script \"{filename}\" \"{url}#{sha}\" \"miniconda\" verify_py{py_version}\n  ;;\n\"\"\".strip()\nhere = Path(__file__).resolve()\nout_dir: Path = here.parent.parent / \"share\" / \"python-build\"\ndef download_sha(url):\n    logger.debug('Downloading SHA file %(url)s', locals())\n    tup = tuple(reversed(requests.get(url).text.replace('./', '').rstrip().split()))",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "description": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "peekOfCode": "here = Path(__file__).resolve()\nout_dir: Path = here.parent.parent / \"share\" / \"python-build\"\ndef download_sha(url):\n    logger.debug('Downloading SHA file %(url)s', locals())\n    tup = tuple(reversed(requests.get(url).text.replace('./', '').rstrip().split()))\n    logger.debug('Got %(tup)s', locals())\n    return tup\ndef create_spec(filename, sha, url):\n    flavor_with_suffix, version, subversion, os, arch = filename.replace('.sh', '').split('-')\n    suffix = flavor_with_suffix[-1]",
        "detail": "~..pyenv.plugins.python-build.scripts.add_miniforge",
        "documentation": {}
    },
    {
        "label": "Parameters",
        "kind": 6,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "class Parameters():\n    batch_size: int = 128\n    epochs: int = 2\n    verbosity: int = 1\n    step_size: int = 374\n    number_folds: int = 2\n    output_size: int = 6\n# In[144]:\n# Loading Data\nimport pandas as pd",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "factors",
        "kind": 2,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "def factors(n):\n    result = set()\n    for i in range(1, int(n**0.5) + 1):\n        div, mod = divmod(n, i)\n        if mod == 0:\n            result |= {i, div}\n    return result\nn_samples = X.shape[0]\nprint(factors(n_samples))\n# In[146]:",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "create_model_1",
        "kind": 2,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "def create_model_1():\n    model = tf.keras.Sequential([\n            tf.keras.layers.Dense(16, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dropout(0.5),\n            tf.keras.layers.Dense(8, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dense(6, activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False), metrics=['accuracy'])\n    return model\n# Something like this as second Model",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "create_model_2",
        "kind": 2,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "def create_model_2():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Reshape((-1, 12), input_shape=(12,)),\n        tf.keras.layers.Conv1D(32, 5, strides=2, padding='same', activation='relu'),\n        tf.keras.layers.Conv1D(16, 3, strides=2, padding='same', activation='relu'),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(6, activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False), metrics=['accuracy'])\n    return model",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "create_model_3",
        "kind": 2,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "def create_model_3():\n    model = tf.keras.Sequential([\n        tf.keras.layers.Reshape((-1, 12), input_shape=(12,)),\n        tf.keras.layers.Conv1D(32, 5, strides=2, padding='same', activation='relu'),\n        tf.keras.layers.Conv1D(16, 3, strides=2, padding='same', activation='relu'),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(6, activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False), metrics=['accuracy'])\n    return model",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "create_model_4",
        "kind": 2,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "def create_model_4():\n    model = tf.keras.Sequential([\n        # Add a 1D convolutional layer\n        tf.keras.layers.Conv1D(filters=64, kernel_size=2, activation='relu', padding='same', input_shape=(timesteps, n_features)),\n        # Add LSTM layer\n        tf.keras.layers.LSTM(100),\n        # Add a dense output layer\n        tf.keras.layers.Dense(6, activation='softmax')  # Change activation function based on the nature of the output\n    ])\n    model.compile(optimizer='adam',   loss='categorical_crossentropy', metrics=['accuracy'])  # Change the loss function based on the nature of the output",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "now",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "now = datetime.now()\ndate_time_string = now.strftime(\"%Y-%m-%d_%H-%M-%S\")\nlogging.basicConfig(level=logging.INFO, filename = f\"{date_time_string}.txt\", filemode='a')\n# In[148]:\nfrom dataclasses import dataclass\n@dataclass\nclass Parameters():\n    batch_size: int = 128\n    epochs: int = 2\n    verbosity: int = 1",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "date_time_string",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "date_time_string = now.strftime(\"%Y-%m-%d_%H-%M-%S\")\nlogging.basicConfig(level=logging.INFO, filename = f\"{date_time_string}.txt\", filemode='a')\n# In[148]:\nfrom dataclasses import dataclass\n@dataclass\nclass Parameters():\n    batch_size: int = 128\n    epochs: int = 2\n    verbosity: int = 1\n    step_size: int = 374",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "df = pd.read_csv(\"Alle_Messungen_trimmed.csv\")\ndf.head(1)\n# In[145]:\ndf = df.drop(columns=[\"id\", \"user\", \"id_combined\"])\ndf.drop(['Unnamed: 0'], axis=1, inplace=True)\n# get all types of the df\ndf['time'] = pd.to_datetime(df['time'])\ndf['time'] = df['time'].astype('int64')//1e9\nle = LabelEncoder()\ndf[\"class\"] = le.fit_transform(df[\"class\"])",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "df = df.drop(columns=[\"id\", \"user\", \"id_combined\"])\ndf.drop(['Unnamed: 0'], axis=1, inplace=True)\n# get all types of the df\ndf['time'] = pd.to_datetime(df['time'])\ndf['time'] = df['time'].astype('int64')//1e9\nle = LabelEncoder()\ndf[\"class\"] = le.fit_transform(df[\"class\"])\n# In[135]:\ndef factors(n):\n    result = set()",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "df['time']",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "df['time'] = pd.to_datetime(df['time'])\ndf['time'] = df['time'].astype('int64')//1e9\nle = LabelEncoder()\ndf[\"class\"] = le.fit_transform(df[\"class\"])\n# In[135]:\ndef factors(n):\n    result = set()\n    for i in range(1, int(n**0.5) + 1):\n        div, mod = divmod(n, i)\n        if mod == 0:",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "df['time']",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "df['time'] = df['time'].astype('int64')//1e9\nle = LabelEncoder()\ndf[\"class\"] = le.fit_transform(df[\"class\"])\n# In[135]:\ndef factors(n):\n    result = set()\n    for i in range(1, int(n**0.5) + 1):\n        div, mod = divmod(n, i)\n        if mod == 0:\n            result |= {i, div}",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "le",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "le = LabelEncoder()\ndf[\"class\"] = le.fit_transform(df[\"class\"])\n# In[135]:\ndef factors(n):\n    result = set()\n    for i in range(1, int(n**0.5) + 1):\n        div, mod = divmod(n, i)\n        if mod == 0:\n            result |= {i, div}\n    return result",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "df[\"class\"]",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "df[\"class\"] = le.fit_transform(df[\"class\"])\n# In[135]:\ndef factors(n):\n    result = set()\n    for i in range(1, int(n**0.5) + 1):\n        div, mod = divmod(n, i)\n        if mod == 0:\n            result |= {i, div}\n    return result\nn_samples = X.shape[0]",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "n_samples",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "n_samples = X.shape[0]\nprint(factors(n_samples))\n# In[146]:\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import to_categorical\nX = df.values[:, 1:13]\ny = df.values[:, 13]\n# Reshape X to 3D format (samples, timesteps, features)\ntimesteps = 1  # You can choose a different number of timesteps based on the nature of your data\nn_features = X.shape[1]",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "X = df.values[:, 1:13]\ny = df.values[:, 13]\n# Reshape X to 3D format (samples, timesteps, features)\ntimesteps = 1  # You can choose a different number of timesteps based on the nature of your data\nn_features = X.shape[1]\nX = X.reshape(-1, timesteps, n_features)\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Convert the labels to one-hot encoding\ny_train = to_categorical(y_train, num_classes=6)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y = df.values[:, 13]\n# Reshape X to 3D format (samples, timesteps, features)\ntimesteps = 1  # You can choose a different number of timesteps based on the nature of your data\nn_features = X.shape[1]\nX = X.reshape(-1, timesteps, n_features)\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Convert the labels to one-hot encoding\ny_train = to_categorical(y_train, num_classes=6)\ny_test = to_categorical(y_test, num_classes=6)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "timesteps",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "timesteps = 1  # You can choose a different number of timesteps based on the nature of your data\nn_features = X.shape[1]\nX = X.reshape(-1, timesteps, n_features)\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Convert the labels to one-hot encoding\ny_train = to_categorical(y_train, num_classes=6)\ny_test = to_categorical(y_test, num_classes=6)\n# In[142]:\n#X_train, X_test, y_train, y_test = ms.train_test_split(df.values[:, 1:13], df.values[:, 13], test_size=0.2, random_state=42)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "n_features",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "n_features = X.shape[1]\nX = X.reshape(-1, timesteps, n_features)\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Convert the labels to one-hot encoding\ny_train = to_categorical(y_train, num_classes=6)\ny_test = to_categorical(y_test, num_classes=6)\n# In[142]:\n#X_train, X_test, y_train, y_test = ms.train_test_split(df.values[:, 1:13], df.values[:, 13], test_size=0.2, random_state=42)\n#X_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size=0.2, random_state=42)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "X = X.reshape(-1, timesteps, n_features)\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Convert the labels to one-hot encoding\ny_train = to_categorical(y_train, num_classes=6)\ny_test = to_categorical(y_test, num_classes=6)\n# In[142]:\n#X_train, X_test, y_train, y_test = ms.train_test_split(df.values[:, 1:13], df.values[:, 13], test_size=0.2, random_state=42)\n#X_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size=0.2, random_state=42)\n#dataset = tf.data.Dataset.from_tensor_slices((df.values[:, 1:13], df.values[:, 13]))",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_train = to_categorical(y_train, num_classes=6)\ny_test = to_categorical(y_test, num_classes=6)\n# In[142]:\n#X_train, X_test, y_train, y_test = ms.train_test_split(df.values[:, 1:13], df.values[:, 13], test_size=0.2, random_state=42)\n#X_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size=0.2, random_state=42)\n#dataset = tf.data.Dataset.from_tensor_slices((df.values[:, 1:13], df.values[:, 13]))\n# In[184]:\n# Template\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_test",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_test = to_categorical(y_test, num_classes=6)\n# In[142]:\n#X_train, X_test, y_train, y_test = ms.train_test_split(df.values[:, 1:13], df.values[:, 13], test_size=0.2, random_state=42)\n#X_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size=0.2, random_state=42)\n#dataset = tf.data.Dataset.from_tensor_slices((df.values[:, 1:13], df.values[:, 13]))\n# In[184]:\n# Template\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nimport numpy as np",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "#dataset",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "#dataset = tf.data.Dataset.from_tensor_slices((df.values[:, 1:13], df.values[:, 13]))\n# In[184]:\n# Template\nimport tensorflow as tf\nfrom sklearn.model_selection import KFold\nimport numpy as np\nimport dataclasses\n# Load data and preprocess\n# split train dataset into x_train and y_train\nx_train = X_train",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "x_train",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "x_train = X_train\nx_test = X_test\ny_train = y_train\ny_test = y_test\n# Something like this as first Model\ndef create_model_1():\n    model = tf.keras.Sequential([\n            tf.keras.layers.Dense(16, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dropout(0.5),\n            tf.keras.layers.Dense(8, activation='relu', input_shape=(12,)),",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "x_test",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "x_test = X_test\ny_train = y_train\ny_test = y_test\n# Something like this as first Model\ndef create_model_1():\n    model = tf.keras.Sequential([\n            tf.keras.layers.Dense(16, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dropout(0.5),\n            tf.keras.layers.Dense(8, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dense(6, activation='softmax')",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_train",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_train = y_train\ny_test = y_test\n# Something like this as first Model\ndef create_model_1():\n    model = tf.keras.Sequential([\n            tf.keras.layers.Dense(16, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dropout(0.5),\n            tf.keras.layers.Dense(8, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dense(6, activation='softmax')\n    ])",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_test",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_test = y_test\n# Something like this as first Model\ndef create_model_1():\n    model = tf.keras.Sequential([\n            tf.keras.layers.Dense(16, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dropout(0.5),\n            tf.keras.layers.Dense(8, activation='relu', input_shape=(12,)),\n            tf.keras.layers.Dense(6, activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False), metrics=['accuracy'])",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "best_model_history",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "best_model_history = None  # Keep track of the best model's history\nmodel_histories = []\n# Perform cross-validation\nmodels = [create_model_4]\nbest_model = None\nnum_folds = Parameters.number_folds\nkfold = KFold(n_splits=num_folds, shuffle=True)\nfold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "model_histories",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "model_histories = []\n# Perform cross-validation\nmodels = [create_model_4]\nbest_model = None\nnum_folds = Parameters.number_folds\nkfold = KFold(n_splits=num_folds, shuffle=True)\nfold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')\n    train_x, train_y = x_train[train], y_train[train]",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "models = [create_model_4]\nbest_model = None\nnum_folds = Parameters.number_folds\nkfold = KFold(n_splits=num_folds, shuffle=True)\nfold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')\n    train_x, train_y = x_train[train], y_train[train]\n    test_x, test_y = x_train[test], y_train[test]\n    fold_histories = []",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "best_model",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "best_model = None\nnum_folds = Parameters.number_folds\nkfold = KFold(n_splits=num_folds, shuffle=True)\nfold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')\n    train_x, train_y = x_train[train], y_train[train]\n    test_x, test_y = x_train[test], y_train[test]\n    fold_histories = []\n    for j, model_creator in enumerate(models):",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "num_folds",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "num_folds = Parameters.number_folds\nkfold = KFold(n_splits=num_folds, shuffle=True)\nfold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')\n    train_x, train_y = x_train[train], y_train[train]\n    test_x, test_y = x_train[test], y_train[test]\n    fold_histories = []\n    for j, model_creator in enumerate(models):\n        model = model_creator()",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "kfold",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "kfold = KFold(n_splits=num_folds, shuffle=True)\nfold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')\n    train_x, train_y = x_train[train], y_train[train]\n    test_x, test_y = x_train[test], y_train[test]\n    fold_histories = []\n    for j, model_creator in enumerate(models):\n        model = model_creator()\n        logging.info(f'Model {j+1}')",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "fold_acc_scores",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "fold_acc_scores = []\nfor i, (train, test) in enumerate(kfold.split(x_train, y_train)):\n    logging.info(f'Fold {i+1}')\n    train_x, train_y = x_train[train], y_train[train]\n    test_x, test_y = x_train[test], y_train[test]\n    fold_histories = []\n    for j, model_creator in enumerate(models):\n        model = model_creator()\n        logging.info(f'Model {j+1}')\n        history = model.fit(train_x, train_y, epochs=Parameters.epochs, batch_size=Parameters.batch_size, validation_data=(test_x, test_y), verbose=Parameters.verbosity)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "best_model_index",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "best_model_index = np.argmax([score[2] for score in fold_acc_scores])\nbest_fold_idx, best_model_idx, _ = max(fold_acc_scores, key=lambda x: x[2])\nbest_model_history = model_histories[best_fold_idx][best_model_idx]\n#ogging.info(fold_acc_scores)\n#logging.info(best_model_index)\n#(best_fold, best_model_index, best_model_acc) = fold_acc_scores[best_model_index]\n#best_model = models[best_model_index]\n#logging.info(f'fold acc score: {fold_acc_scores}')\n#logging.info(f'Best model is model {best_model_index+1}')\n# Evaluate the best model on the test set",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "best_model_history",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "best_model_history = model_histories[best_fold_idx][best_model_idx]\n#ogging.info(fold_acc_scores)\n#logging.info(best_model_index)\n#(best_fold, best_model_index, best_model_acc) = fold_acc_scores[best_model_index]\n#best_model = models[best_model_index]\n#logging.info(f'fold acc score: {fold_acc_scores}')\n#logging.info(f'Best model is model {best_model_index+1}')\n# Evaluate the best model on the test set\ntest_loss, test_acc = best_model.evaluate(x_test, y_test)\nlogging.info(f'Test accuracy {test_acc}')",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "#best_model",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "#best_model = models[best_model_index]\n#logging.info(f'fold acc score: {fold_acc_scores}')\n#logging.info(f'Best model is model {best_model_index+1}')\n# Evaluate the best model on the test set\ntest_loss, test_acc = best_model.evaluate(x_test, y_test)\nlogging.info(f'Test accuracy {test_acc}')\n# In[188]:\nmodel_histories\n# In[174]:\nimport matplotlib.pyplot as plt",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_pred = model.predict(X_test)\n# In[ ]:\nmodel.evaluate(X_test, y_test)\n# In[ ]:\n# plot a confusion matrix\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\ncm = confusion_matrix(y_test, y_pred.argmax(axis=1))\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred.argmax(axis=1))\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()\nplt.show()\n# In[ ]:\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\ny_test_labels = y_test.argmax(axis=1)\ny_pred_labels = y_pred.argmax(axis=1)\ncm = confusion_matrix(y_test_labels, y_pred_labels)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()\nplt.show()\n# In[ ]:\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\ny_test_labels = y_test.argmax(axis=1)\ny_pred_labels = y_pred.argmax(axis=1)\ncm = confusion_matrix(y_test_labels, y_pred_labels)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_test_labels",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_test_labels = y_test.argmax(axis=1)\ny_pred_labels = y_pred.argmax(axis=1)\ncm = confusion_matrix(y_test_labels, y_pred_labels)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()\nplt.show()\n# In[ ]:\n# Export Model for using in tensorflow.js\nget_ipython().system('mkdir -p saved_model')\nbest_model.save('saved_model/sensor_model')",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "y_pred_labels",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "y_pred_labels = y_pred.argmax(axis=1)\ncm = confusion_matrix(y_test_labels, y_pred_labels)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()\nplt.show()\n# In[ ]:\n# Export Model for using in tensorflow.js\nget_ipython().system('mkdir -p saved_model')\nbest_model.save('saved_model/sensor_model')\nbest_model.save('saved_model/sensor_model.h5')",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "cm = confusion_matrix(y_test_labels, y_pred_labels)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()\nplt.show()\n# In[ ]:\n# Export Model for using in tensorflow.js\nget_ipython().system('mkdir -p saved_model')\nbest_model.save('saved_model/sensor_model')\nbest_model.save('saved_model/sensor_model.h5')\n# In[ ]:",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    },
    {
        "label": "disp",
        "kind": 5,
        "importPath": "DL-Modelle-First-Experiment",
        "description": "DL-Modelle-First-Experiment",
        "peekOfCode": "disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le.classes_)\ndisp.plot()\nplt.show()\n# In[ ]:\n# Export Model for using in tensorflow.js\nget_ipython().system('mkdir -p saved_model')\nbest_model.save('saved_model/sensor_model')\nbest_model.save('saved_model/sensor_model.h5')\n# In[ ]:\n# Save the weight for the Js Model",
        "detail": "DL-Modelle-First-Experiment",
        "documentation": {}
    }
]